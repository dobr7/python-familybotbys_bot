import telebot
import requests
import feedparser  # type: ignore
import re

BOT_TOKEN = "8128313701:AAGbdvjIkfAZz1iqD4cnY9RMzqvXoICagYk"
WEATHER_API_KEY = "d9f27706e9fddf4e772de7674561bcfc"
FINANCE_API_KEY = "c693be22a0d0492e067be7c1"

bot = telebot.TeleBot(BOT_TOKEN)


waiting_for_city = {}  # user_id -> True/False


# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
def escape_md_v2(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2
    return re.sub(r"([_*\[\]()~`>#+-=|{}.!])", r"\\\1", text)


# ===== –ü–û–ì–û–î–ê =====
def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url).json()

    if response.get("cod") != 200:
        return "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞/—Å—Ç—Ä–∞–Ω—ã üòï"

    temp = response["main"]["temp"]
    description = response["weather"][0]["description"]
    wind = response["wind"]["speed"]

    if "–æ–±–ª–∞—á–Ω–æ" in description or "–ø–∞—Å–º—É—Ä–Ω–æ" in description:
        emoji = "‚òÅÔ∏è"
    elif "—è—Å–Ω–æ" in description or "—Å–æ–ª–Ω–µ—á–Ω–æ" in description:
        emoji = "‚òÄÔ∏è"
    elif "–¥–æ–∂–¥—å" in description:
        emoji = "üåßÔ∏è"
    elif "—Å–Ω–µ–≥" in description:
        emoji = "‚ùÑÔ∏è"
    elif "—Ç—É–º–∞–Ω" in description:
        emoji = "üå´Ô∏è"
    else:
        emoji = "üå°Ô∏è"

    if wind < 3:
        wind_emoji = "üçÉ"
    elif wind < 7:
        wind_emoji = "üí®"
    else:
        wind_emoji = "üå¨Ô∏è"

    weather_message = (
        f"*–ü–æ–≥–æ–¥–∞ –≤ {city}* {emoji}\n\n"
        f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temp:.1f}¬∞C\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
        f"üåÄ *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {wind:.1f} –º/—Å {wind_emoji}"
    )

    return weather_message


# ===== –ù–û–í–û–°–¢–ò =====
def get_rss_news(count=5):
    url = "https://ria.ru/export/rss2/index.xml?page_type=google_newsstand"
    feed = feedparser.parse(url)
    news_items = []

    for entry in feed.entries[:count]:
        title = entry.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        link = entry.get("link", "")
        escaped_title = escape_md_v2(title)
        escaped_link = escape_md_v2(link)
        news_items.append(
            f"üì∞ *{escaped_title}*\nüîó [–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ‚Ä¶]({escaped_link})"
        )

    if not news_items:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ üòï"

    return "üåé *–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n\n" + "\n\n".join(news_items)


# ===== –ö–£–†–°–´ –í–ê–õ–Æ–¢ =====
def get_exchange_rates_message():
    url = "https://v6.exchangerate-api.com/v6/c693be22a0d0492e067be7c1/latest/USD"
    try:
        resp = requests.get(url).json()
        rates = resp.get("conversion_rates")
        if not rates:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üòï"

        usd_to_rub = rates.get("RUB")  # 1 USD –≤ RUB
        usd_to_eur = rates.get("EUR")  # 1 USD –≤ EUR
        eur_to_rub = usd_to_rub / usd_to_eur  # 1 EUR –≤ RUB

        return (
            "üè¶ *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:*\n\n"
            f"üá∫üá∏ USD ‚Üí üá∑üá∫ RUB: {usd_to_rub:.2f} ‚ÇΩ\n"
            f"üá™üá∫ EUR ‚Üí üá∑üá∫ RUB: {eur_to_rub:.2f} ‚ÇΩ\n\n"
            f"üá∑üá∫ RUB ‚Üí üá∫üá∏ USD: {1/usd_to_rub:.4f} $\n"
            f"üá∑üá∫ RUB ‚Üí üá™üá∫ EUR: {1/eur_to_rub:.4f} ‚Ç¨"
        )
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}"


# ===== –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ =====
def get_crypto_rates_message():
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {"ids": "bitcoin,ethereum,tether", "vs_currencies": "usd,rub"}
    try:
        resp = requests.get(url, params=params).json()

        btc_usd = resp["bitcoin"]["usd"]
        btc_rub = resp["bitcoin"]["rub"]

        eth_usd = resp["ethereum"]["usd"]
        eth_rub = resp["ethereum"]["rub"]

        usdt_usd = resp["tether"]["usd"]
        usdt_rub = resp["tether"]["rub"]

        return (
            "üíé *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:*\n\n"
            f"‚Çø Bitcoin:\n{btc_usd:,.2f} $ | {btc_rub:,.2f} ‚ÇΩ\n\n"
            f"Œû Ethereum:\n{eth_usd:,.2f} $ | {eth_rub:,.2f} ‚ÇΩ\n\n"
            f"üíµ Tether (USDT):\n{usdt_usd:,.2f} $ | {usdt_rub:,.2f} ‚ÇΩ"
        )
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}"


# ===== –ö–û–ú–ê–ù–î–´ =====


# –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø *–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫*.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n\n"
        "üå§ /weather ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É\n\n"
        "üì∞ /news ‚Äì —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
        "üí± /finance ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n\n"
        "üìå /help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n",
        parse_mode="Markdown",
    )


# –∫–æ–º–∞–Ω–¥–∞ /news
@bot.message_handler(commands=["news"])
def send_news(message):
    news = get_rss_news()
    bot.send_message(message.chat.id, news, parse_mode="MarkdownV2")


# –∫–æ–º–∞–Ω–¥–∞ /exchange (–≤–∞–ª—é—Ç—ã + –∫—Ä–∏–ø—Ç–∞)
@bot.message_handler(commands=["finance"])
def send_exchange(message):
    currency_msg = get_exchange_rates_message()
    crypto_msg = get_crypto_rates_message()
    full_msg = currency_msg + "\n\n" + crypto_msg
    bot.send_message(message.chat.id, full_msg, parse_mode="Markdown")


# –∫–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=["help"])
def send_help(message):
    help_text = (
        "üìå *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:*\n\n"
        "üå§ /weather ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n\n"
        "üì∞ /news ‚Äì —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
        "üí± /finance ‚Äì –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n\n"
        "‚ÑπÔ∏è /help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")


# –∫–æ–º–∞–Ω–¥–∞ /weather
@bot.message_handler(commands=["weather"])
def ask_city(message):
    user_id = message.from_user.id
    waiting_for_city[user_id] = True
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,\n–∏ —è –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É üåç")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∂–¥—ë–º –≥–æ—Ä–æ–¥
@bot.message_handler(func=lambda m: True)
def city_weather(message):
    user_id = message.from_user.id
    if waiting_for_city.get(user_id):
        city = message.text.strip()
        weather = get_weather(city)
        bot.send_message(
            message.chat.id, weather, parse_mode="Markdown"
        )  # <-- –∑–¥–µ—Å—å –¥–æ–±–∞–≤–∏–ª–∏ parse_mode
        waiting_for_city[user_id] = False
    else:
        # –≤ –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –±–æ—Ç –º–æ–ª—á–∏—Ç
        pass


bot.polling(none_stop=True, interval=0)
